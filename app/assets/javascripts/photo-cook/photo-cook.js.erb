(function(root) {
  var PhotoCook = {
    cacheDir: <%= PhotoCook.cache_dir.to_json %>,

    commandRegex: /^$width=auto|\d{1,5}&height=auto|\d{1,5}&pixel_ratio=[1234]&crop=yes|no$/,

    initialize: function() {
      PhotoCook.persistPixelRatio();
    },

    // Returns device pixel ratio (float)
    // If no ratio could be determined will return normal ratio (1.0)
    pixelRatio: (function () {
      // https://gist.github.com/marcedwards/3446599
      var mediaQuery = [
          '(-webkit-min-device-pixel-ratio: 1.3)',
          '(-o-min-device-pixel-ratio: 13/10)',
          'min-resolution: 120dpi'
      ].join(', ');

      var ratio = window.devicePixelRatio;

      // If no ratio found check if screen is retina
      // and if so return 2x ratio
      if (ratio == null && typeof window.matchMedia === 'function') {
        if (window.matchMedia(mediaQuery).matches) {
          ratio = 2.0;
        }
      }

      return parseFloat(ratio) || 1.0;
    })(),

    persistPixelRatio: function() {
        var date = new Date();

        // Expires in 1 year
        date.setTime(date.getTime() + 365 * 24 * 60 * 60 * 1000);
        var expires = 'expires=' + date.toUTCString();
        document.cookie = 'PhotoCookPixelRatio=' + PhotoCook.pixelRatio + '; ' + expires;
    },

    resize: function (path, width, height, options) {
      var crop    = typeof options === 'boolean' ? !!options : !!(options && options.crop);
      var ratio   = Math.ceil(Math.max(0, options && options.pixelRatio) || PhotoCook.pixelRatio);
      var command = 'width='       + (+width  || 'auto') +
                   '&height='      + (+height || 'auto') +
                   '&pixel_ratio=' + (+ratio  || 1) +
                   '&crop='        + (crop ? 'yes' : 'no');
      var els     = path.split('/');
      els.splice(-1, 0, PhotoCook.cacheDir, command);
      return els.join('/');
    },

    srcset: function (path, width, height, options) {
      var crop = typeof options === 'boolean' ? !!options : !!(options && options.crop);
      return this.resize(path, width, height, {crop: crop, pixelRatio: 2}) + ' 2x, ' +
             this.resize(path, width, height, {crop: crop, pixelRatio: 3}) + ' 3x'
    },

    strip: function (uri) {
      var sections = uri.split('/');
      var length   = sections.length;
      if (length < 3) { return uri; }

      var cacheDir = sections[length - 3];
      var command  = sections[length - 2];

      if (PhotoCook.cacheDir !== cacheDir || PhotoCook.commandRegex.test(command) === false) {
        return uri;
      }

      sections.splice(length - 3, 2)
      return sections.join('/');
    },

    uriRegex: /^[-a-z]+:\/\/|^(?:cid|data):|^\/\//i,

    // Returns true if given URL can produce request to PhotoCook middleware on server
    isServableURL: function(url) {
      // By default check that URL is relative
      return !PhotoCook.uriRegex.test(url);
    }
  };

  root.PhotoCook = PhotoCook;
})(this);

PhotoCook.initialize();

// navigator.cookieEnabled